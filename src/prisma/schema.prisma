// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profile  Profile?
  projects Project[]
  contacts Contact[]

  @@map("users")
}

model Profile {
  id           String   @id @default(cuid())
  userId       String   @unique
  bio          String?
  title        String?
  location     String?
  phone        String?
  linkedin     String?
  github       String?
  website      String?
  whatsapp     String?
  profileImage String?
  resumeUrl    String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  user         User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  skills       Skill[]
  achievements Achievement[]
  files        File[]

  @@map("profiles")
}

model Project {
  id              String          @id @default(cuid())
  title           String
  description     String
  longDescription String?
  image           String?
  tags            String[] // Array of technology tags
  category        ProjectCategory
  link            String?
  github          String?
  status          ProjectStatus   @default(IN_PROGRESS)
  duration        String?
  teamSize        String?
  features        String[] // Array of features
  isPublic        Boolean         @default(true)
  order           Int             @default(0)
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt

  // Relations
  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  files    File[]

  @@map("projects")
}

model Skill {
  id        String        @id @default(cuid())
  name      String
  level     Int // 1-100 proficiency level
  category  SkillCategory
  icon      String?
  isVisible Boolean       @default(true)
  order     Int           @default(0)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("skills")
}

model Achievement {
  id          String   @id @default(cuid())
  title       String
  description String
  date        DateTime
  icon        String?
  link        String?
  isVisible   Boolean  @default(true)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@map("achievements")
}

model Contact {
  id        String        @id @default(cuid())
  name      String
  email     String
  subject   String?
  message   String
  status    ContactStatus @default(UNREAD)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Relations
  assignedToId String?
  assignedTo   User?   @relation(fields: [assignedToId], references: [id])

  @@map("contacts")
}

model AboutCard {
  id        String   @id @default(cuid())
  question  String
  answer    String
  icon      String
  gradient  String // CSS gradient class
  order     Int      @default(0)
  isVisible Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("about_cards")
}

model File {
  id        String   @id @default(cuid())
  name      String
  url       String
  path      String
  type      String
  size      Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  profileId String?
  profile   Profile? @relation(fields: [profileId], references: [id], onDelete: Cascade)
  projectId String?
  project   Project? @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("files")
}

// Enums
enum Role {
  USER
  ADMIN
  SUPER_ADMIN
}

enum ProjectCategory {
  WEB
  MOBILE
  AI
  IOT
  DESKTOP
  OTHER
}

enum ProjectStatus {
  PLANNING
  IN_PROGRESS
  COMPLETED
  ON_HOLD
  CANCELLED
}

enum SkillCategory {
  FRONTEND
  BACKEND
  MOBILE
  DEVOPS
  DATABASE
  AI_ML
  TOOLS
  SOFT_SKILLS
}

enum ContactStatus {
  UNREAD
  READ
  IN_PROGRESS
  RESOLVED
  ARCHIVED
}
